### vars

BAREMETAL_NET="10.100.0.0/16"
PROVISIONING_NET="10.101.0.0/16" #.1 for engine host, .2 bootstrapProvisioningIP, .3 clusterProvisioningIP
BAREMETAL_OCP_API="10.100.0.1"
BAREMETAL_OCP_APPS="10.100.0.2"
BAREMETAL_ENGINE="10.100.0.3"
BAREMETAL_DHCP_RANGE="10.100.0.4,10.100.254.254"
IPMI_START="10.200.0.0" # has to be a.b.c.0/16

OCP_CLUSTER="perf-test"
OCP_DOMAIN="example.com"

# Use local disk space on / or the whole disk (note it will be wiped silently!)
# There needs to be enough space (~ 3x the DISK_SIZE below) on / of the engine host, and enough space to hold VM
# data on each host (up to DISK_SIZE * number of VMs/host) - these are thin provisioned so you can overcommit
# if you do not plan to use OCP's disk too much
LOCALDISK_VG_MB="409600"
#WHOLE_DISK=sdc

MASTER_MEMORY=34359738368 #32GB
MASTER_CPUS=20
WORKER_MEMORY=17179869184 #16GB
WORKER_MEMORY_MIN=6442450944 #6GB
WORKER_CPUS=4
DISK_SIZE=107374182400 # 100GB

MASTERS=3
WORKERS=10

### internal

echo() { local N=""; [[ "$1" == "-n" ]] && { N="n"; shift; }; command echo -${N}e "[\033[0;31mLAB\033[0m] $@"; }
die() { echo "FAIL: $@"; exit 1; }
curl_api() { local endpoint=$1; shift; curl -s -k -u admin@internal:password -H 'Content-type: application/xml' https://$ENGINE/ovirt-engine/api/${endpoint} "$@"; }

get_first_nic() {
    curl_api "/vms?search=name=${1}&follow=nics" | tr -d "\n" | sed 's|^.*<nics>||g; s|</nics>.*$||g' | sed -n 's|^.*<name>nic1</name>.*<address>\(.*\)</address>.*<name>nic2</name>.*|\1|p'
}
get_second_nic() {
    curl_api "/vms?search=name=${1}&follow=nics" | tr -d "\n" | sed 's|^.*<nics>||g; s|</nics>.*$||g' | sed -n 's|^.*<name>nic2</name>.*<address>\(.*\)</address>.*|\1|p'
}

# ipmi
IPMI_NEXT_C=100
next_ipmi() {
    IPMI_ADDRESS=${IPMI_ADDRESS%$IPMI_D}$((++IPMI_D))
    [[ "$IPMI_D" -gt "$IPMI_NEXT_C" ]] && {
        IPMI_D=1
        local c=$(command echo $IPMI_ADDRESS | cut -d. -f3)
        IPMI_ADDRESS="$(command echo $IPMI_START | cut -d. -f1,2).$((++c)).$IPMI_D"
    }
}
reset_ipmi_address() { IPMI_ADDRESS=$IPMI_START; IPMI_D=0; }
reset_ipmi_address

SSH='ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o User=root'
SCP='scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o User=root'

ENGINE=$(cat engine 2>/dev/null | cut -d, -f1)
HOSTS=$(cat hosts 2>/dev/null | cut -d, -f1)

# ssh keyboard interactive login
[[ "$_LAB_ROOT_PASS" ]] && command echo "$_LAB_ROOT_PASS"
